import type { Document } from '../bson';
import type { Db } from '../db';
import { type Abortable } from '../mongo_types';
import { executeOperation } from '../operations/execute_operation';
import {
  type CollectionInfo,
  ListCollectionsOperation,
  type ListCollectionsOptions
} from '../operations/list_collections';
import type { ClientSession } from '../sessions';
<<<<<<< HEAD
import { AbstractCursor, type InitialCursorResponse } from './abstract_cursor';
=======
import { AbstractCursor } from './abstract_cursor';
>>>>>>> 4575f0025c59112edbf6872895fd20b22c0683f1

/** @public */
export class ListCollectionsCursor<
  T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =
    | Pick<CollectionInfo, 'name' | 'type'>
    | CollectionInfo
> extends AbstractCursor<T> {
  parent: Db;
  filter: Document;
  options?: ListCollectionsOptions & Abortable;

  constructor(db: Db, filter: Document, options?: ListCollectionsOptions & Abortable) {
    super(db.client, db.s.namespace, options);
    this.parent = db;
    this.filter = filter;
    this.options = options;
  }

  clone(): ListCollectionsCursor<T> {
    return new ListCollectionsCursor(this.parent, this.filter, {
      ...this.options,
      ...this.cursorOptions
    });
  }

  /** @internal */
<<<<<<< HEAD
  async _initialize(session: ClientSession | undefined): Promise<InitialCursorResponse> {
=======
  async _initialize(session: ClientSession | undefined): Promise<ExecutionResult> {
>>>>>>> 4575f0025c59112edbf6872895fd20b22c0683f1
    const operation = new ListCollectionsOperation(this.parent, this.filter, {
      ...this.cursorOptions,
      ...this.options,
      session,
      signal: this.signal
    });

<<<<<<< HEAD
    const response = await executeOperation(this.parent.client, operation, this.timeoutContext);

=======
    const response = await executeOperation(this.parent.client, operation);

    // TODO: NODE-2882
>>>>>>> 4575f0025c59112edbf6872895fd20b22c0683f1
    return { server: operation.server, session, response };
  }
}
